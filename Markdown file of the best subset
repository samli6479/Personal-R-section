
```{r}
require(ISLR)
summary(Hitters)
```
some missing values remove them
```{r}
Hitters=na.omit(Hitters)
with(Hitters,sum(is.na(Salary)))
```
Best Subset regression
```{r}
require(leaps)
regfit.full=regsubsets(Salary~.,data=Hitters)
summary(regfit.full)
?regsubsets
```
default with subset is 8
move to full subsets
```{r}
regfit.full=regsubsets(Salary~.,data=Hitters,nvmax=19)
reg.summary=summary(regfit.full)
names(reg.summary)
plot(reg.summary$cp,xlab="Number of Variables", ylab="Cp")
which.min(reg.summary$cp)
points(10,reg.summary$cp[10],pch=20,col="red")
```
plot of the regsubsets
```{r}
plot(regfit.full,scale="Cp")
coef(regfit.full,10)
```
Forward Method
```{r}
regfit.fw=regsubsets(Salary~.,data=Hitters,nvmax=19,method="forward")
summary(regfit.fw)
plot(regfit.fw,scale="Cp")
```

Model Selection with validation set
```{r}
dim(Hitters)
set.seed(1)
train=sample(seq(263),180,replace=FALSE)
train
regfit.fwd=regsubsets(Salary~.,data=Hitters[train,],nvmax=19,method="forward")
```
now make validation
```{r}
val.errors=rep(NA,19)
x.test=model.matrix(Salary~.,data=Hitters[-train,])
for (i in 1:19){
  coefi=coef(regfit.fwd,id=i)
  pred=x.test[,names(coefi)]%*%coefi
  val.errors[i]=mean((Hitters$Salary[-train]-pred)^2)
}
plot(sqrt(val.errors),ylab="ROOT MSE",ylim=c(300,400),pch=19,type="b")
points(sqrt(regfit.fwd$rss[-1]/180),col="blue",pch=19,type="b")
legend("topright",legend=c("Trainning","Validation"),col=c("blue","black"),pch=19)
```
new predict method for regsubset
```{r}
predict.regsubsets=function(object,newdata,id,...){
  form=as.formula(object$call[[2]])
  mat=model.matrix(form,newdata)
  coefi=coef(object,id=id)
  mat[,names(coefi)]%*%coefi
}
```
Cross validation with 10 fold
```{r}
set.seed(11)
folds=sample(rep(1:10,length=nrow(Hitters)))
folds
table(folds)
cv.errors=matrix(NA,10,19)
for (k in 1:10){
  best.fit=regsubsets(Salary~.,data=Hitters[folds!=k,],nvmax=19,method="forward")
  for (i in 1:19){
   pred=predict(best.fit,Hitters[folds==k,],id=i)
   cv.errors[k,i]=mean((Hitters$Salary[folds==k]-pred)^2)
  }
}
rmse.cv=sqrt(apply(cv.errors,2,mean))
plot(rmse.cv,pch=19,type="b")
```{r}
require(glmnet)
x=model.matrix(Salary~.-1,data=Hitters)
y=Hitters$Salary
```
Fit a Rige Regression model
```{r}
fit.ridge=glmnet(x,y,alpha=0)
plot(fit.ridge,xvar="lambda",label=TRUE)
plot(fit.ridge,xvar="dev",label=TRUE)
cv.ridge=cv.glmnet(x,y,alpha=0)
plot(cv.ridge)
```
Lasso model
```{r}
fit.lasso=glmnet(x,y)
plot(fit.lasso,xvar="lambda",label=TRUE)
plot(fit.lasso,xvar="dev",label=TRUE)
cv.lasso=cv.glmnet(x,y)
plot(cv.lasso)
coef(cv.lasso)
```
Use train/validation to select lambda
```{r}
lasso.tr=glmnet(x[train,],y[train])
lasso.tr
pred=predict(lasso.tr,x[-train,])
dim(pred)
rmse=sqrt(apply((y[-train]-pred)^2,2,mean))
plot(log(lasso.tr$lambda),rmse,type="b",xlab="Log(Lambda)")
Lambda.best=lasso.tr$lambda[order(rmse)[1]]
Lambda.best
coef(lasso.tr,s=Lambda.best)
```
